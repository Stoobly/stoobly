{"version":3,"sources":["webpack:///node_modules/@angular/material/fesm2015/autocomplete.js"],"names":["_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","_MatAutocompleteBase","_changeDetectorRef","_elementRef","defaults","_activeOptionChanges","EMPTY","showPanel","_isOpen","displayWith","optionSelected","opened","closed","optionActivated","_classList","id","_autoActiveFirstOption","_keyManager","options","withWrap","change","subscribe","index","emit","toArray","_setVisibility","unsubscribe","scrollTop","panel","nativeElement","length","_setVisibilityClasses","markForCheck","event","labelId","ariaLabel","ariaLabelledby","classList","_visibleClass","_hiddenClass","value","reduce","className","decorators","type","ctorParameters","undefined","args","propDecorators","template","panelWidth","MatAutocomplete","arguments","selector","encapsulation","None","changeDetection","OnPush","exportAs","inputs","host","providers","provide","useExisting","styles","optionGroups","descendants","_MatAutocompleteOriginBase","elementRef","MatAutocompleteOrigin","AUTOCOMPLETE_OPTION_HEIGHT","AUTOCOMPLETE_PANEL_HEIGHT","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_MatAutocompleteTriggerBase","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_defaults","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","map","onSelectionChange","onStable","pipe","_scrollStrategy","window","_getWindow","runOutsideAngular","addEventListener","changes","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","_attachOverlay","_floatLabel","_resetLabel","hasAttached","detach","_closingActionsSubscription","detectChanges","clickTarget","_isInsideShadowRoot","composedPath","target","formField","customOrigin","connectedTo","contains","overlayElement","Promise","resolve","then","_setTriggerValue","fn","isDisabled","disabled","keyCode","preventDefault","activeOption","_selectViaInteraction","_resetActiveItem","prevActiveItem","activeItem","isArrowKey","onKeydown","_canOpen","openPanel","_scrollToOption","activeItemIndex","parseFloat","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","closePanel","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","_emitSelectEvent","skip","forEach","selected","deselect","_a","ngDevMode","overlayRef","_portal","_labelId","create","_getOverlayConfig","keydownEvents","next","stopPropagation","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","_subscribeToClosingActions","positionStrategy","_getOverlayPosition","direction","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","_aboveClass","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setActiveItem","element","readOnly","defaultView","labelCount","_setScrollTop","_getHostElement","newScrollPosition","offsetTop","offsetHeight","_getScrollTop","tabOut","_getOutsideClickStream","detachments","autocompleteDisabled","MatAutocompleteModule","imports","exports","declarations"],"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","file":"default~requests-requests-module~scenarios-scenarios-module~subscriptions-pages-buy-buy-module-es5.js","sourcesContent":["import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {\n}\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n    constructor(_changeDetectorRef, _elementRef, defaults) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated using the keyboard. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /** Whether the autocomplete panel is open. */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        return this.ariaLabelledby ? labelId + ' ' + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n}\n_MatAutocompleteBase.decorators = [\n    { type: Directive }\n];\n_MatAutocompleteBase.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\n_MatAutocompleteBase.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    optionActivated: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\nclass MatAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n        super(...arguments);\n        this._visibleClass = 'mat-autocomplete-visible';\n        this._hiddenClass = 'mat-autocomplete-hidden';\n    }\n}\nMatAutocomplete.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-autocomplete',\n                template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ],\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"]\n            },] }\n];\nMatAutocomplete.propDecorators = {\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\n_MatAutocompleteOriginBase.decorators = [\n    { type: Directive }\n];\n_MatAutocompleteOriginBase.ctorParameters = () => [\n    { type: ElementRef }\n];\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\n}\nMatAutocompleteOrigin.decorators = [\n    { type: Directive, args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin',\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n/**\n * The height of each autocomplete option.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 12.0.0\n */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 12.0.0\n */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /** Stream of autocomplete option selections. */\n        this.optionSelections = defer(() => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend'))\n            .pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._setTriggerValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifierKey(event)) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event));\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _setTriggerValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    _attachOverlay() {\n        var _a;\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        // We want to resolve this once, as late as possible so that we can be\n        // sure that the element has been moved into its final place in the DOM.\n        if (this._isInsideShadowRoot == null) {\n            this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, { id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a._labelId });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                    (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            });\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    _getOverlayConfig() {\n        var _a;\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir,\n            panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    _resetActiveItem() {\n        this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n}\n_MatAutocompleteTriggerBase.decorators = [\n    { type: Directive }\n];\n_MatAutocompleteTriggerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\n_MatAutocompleteTriggerBase.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n        super(...arguments);\n        this._aboveClass = 'mat-autocomplete-panel-above';\n    }\n}\nMatAutocompleteTrigger.decorators = [\n    { type: Directive, args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                    CommonModule\n                ],\n                exports: [\n                    MatAutocomplete,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    CdkScrollableModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\n//# sourceMappingURL=autocomplete.js.map\n"]}